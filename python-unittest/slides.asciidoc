= Unit Testing with Python
Zilogic Systems
:data-uri:

== Introduction

=== Why write Test Cases?

  * Python's expressiveness and dynamic nature makes it very
    powerful

  * Some times it just too powerful, and wielding it needs care

  * Can you spot the issue in the following code?

[source,python]
------
class ProtocolX:
    def __init__(self, server, username, password):
        self.server = server
	self.username = username
        self.passwd = password

    def reconnect(self, server):
        self._disconnect()
        self.sevrer = server
        self._connect()
------

=== More Examples

  * Such issues are hard to debug, hours are wasted chasing such bugs

  * Typos can lurk within code paths that are seldom taken

  * Causing programs to crash, when they shouldn't

[source,python]
------
def read_file(filename):
    try:
        fp = open(filename)
	data = fp.read()
    except IOError as exc:
        log.err("error reading '%s': %s" % (filenme, exc))
    finally:
        fp.close()
------

=== Too Powerful!

  * Python lacks the safety net of a compiler and static type checking

  * Remember what Uncle Ben said to Peter Parker?
+
[quote,Uncle Ben]
______
With great *powers*, comes great *responsibility*.
______
+

  * Responsible Python programmers, write automated test cases for their
    code

  * Driving the code through all possible code paths, weeding out
    silly typos and regressions

=== E2E vs Unit Testing

  * People generally tend to test their software as a whole
    - Run the program
    - Input data through the UI
    - Check program's response

  * Tests done this way automated or manual is called End-to-End
    Testing

  * E2E Testing is required but not sufficient

=== Drawbacks of E2E Testing

  * It is terribly *slow*
  
    - Accessing database, networks, files, etc. is slow
    - Implication: Will not be run often
    
  * Running test cases has *dependencies*

    - Depends on the availability of test server, input emulators, etc.
    - Implication: Only people with access to resources can execute it

  * Hard to determine *root cause* of failing test

    - Implication: For a large code base, takes time and effort to zero in on the faulty code

=== Drawback of E2E Testing (Contd.)

  * Cannot drive program through all possible code path, *low code coverage*

    - Some error scenarios is almost impossible to create
    - Implication: Low code coverage, and typos lurking in untested code paths

  * E2E tests can be *flaky*

    - Intermittent network failures, power outages, device failures,
      can cause tests to fail
    
    - Implication: Reduces trust on the tests

=== Unit Testing

  * Unit Tests, verify the public interface of a module / class, in
    isolation

  * Dependencies are *mocked* or *faked*

  * Written and executed by developers

=== Advantages of Unit Testing

  * Unit tests are extremely *fast*
    - They do not use databases, network, file system, other applications, console, etc.

  * Unit tests provide *early feedback*
    - No test setup or resources are required to run the tests
    - Developers can run them every time they make a change and before committing the code

=== Advantages of Unit Testing (Contd.)

  * Unit tests makes it easier to *refactor*
    - Any regression due to refactoring, will be caught by unit tests
    - Code can be refactored / improved without the fear of regression


[role="two-column"]
=== Testing Pyramid

[role="left"]
image::figures/test-pyramid.png[align="center"]

[role="right"]

  * Unit tests verify the *functionality of each unit*

  * Integration tests verify that the *units work together* at the
    sub-system level

  * E2E tests verify that the *product works as a whole*

  * A good test strategy will have, a mix of each approach, with most
    of the testing done at the unit level

[role="tip"]
=== //

Article on Google Testing Blog:
http://googletesting.blogspot.in/2015/04/just-say-no-to-more-end-to-end-tests.html[Just
Say No to More End-to-End Tests]

== Writing Unit Tests

[role="two-column"]
=== Sokoban

[role="left"]
image::figures/sokoban.png[align="center"]

[role="right"]
  * A puzzle game, where the player pushes boxes to docks
  * Restrictions
    - Boxes cannot be pulled
    - Boxes cannot be pushed into walls or other boxes

  * Under 400 lines of code, written using Pygame

  * Will serve as base for practicing writing unit test cases

[role="two-column"]
=== Sokoban

[role="left"]
image::figures/sokoban.png[align="center"]

[role="right"]
  * First, let's try playing around with it

  * You need to have `pygame` installed

  * Download link:{include:game.zip.datauri}["game.zip",filename="game.zip"]

  * Extract and run the program
+
------
$ unzip game.zip
$ cd game
$ python3 sokoban.py
------
+
  * Arrow keys to move, `S` to skip to next level

=== Unit Testing Frameworks

  * Unit testing frameworks provide the necessary infrastructure to

    - Write test cases
    - Run the test cases
    - Generate test reports

  * Available unit testing frameworks

    - `unittest`, part of standard library
    - `py.test`, popular third party framework
    - `nose2`, extends `unittest`, making nicer and easier

[role="two-column"]
=== Sokoban Levels

[role="left"]
[source,python]
------
include::code/test_model_v1.py[]
------

[role="right"]
  * A level is represented as a list of strings.
  * Corresponding graphical representation
+
image::figures/sokoban-level-example.png[]
+
  * The `World` class parses the given level, and sets
    up its attributes

=== Try Out

  * Go to the top level folder (the one that contains the `README` file)

  * Create `test_sokoban.py`, with the code from previous slide

  * Execute and verify the output

=== Writing a Test Case

[source,python]
------
include::code/test_model_v2.py[]
------

=== Try Out

  * Update `test_sokoban.py` with the code from the previous slide

  * Invoke `py.test`
    - Discovers all files starting with `test_`
    - Looks for functions with `test_`
    - Executes the test
    - Records and prints the results

  * Change the assertion of `ncols` to `assert world.ncols == 8`
    causing it to fail, and observe the output of `py.test`

=== One Logical Concept Per Test

  * Tests to verify the other attributes.
+
[source,python]
------
include::code/test_model_v3/tests.py[]
------
+
  * Each test only verifies one logical concept

  * Test functions are named verbosely to indicate what is being tested

=== Increasing Coverage

  * Tests to verify dimensions is correctly reported in a
    non-rectangular world

  * Tests to verify positions are correctly reported when there are
    multiple docks and boxes

  * Add a level variant, with non-rectangular border and multiple
    docks and boxes
+
[source,python]
------
include::code/test_model_v4/level.py[]
------

=== Increasing Coverage (Contd.)

[source,python]
------
include::code/test_model_v4/tests.py[]
------

=== Assert Raises Exception

  * A `ValueError` is thrown
    - When an invalid character is present
    - Or when the worker is missing
    - Or when the number of boxes and docks do not match
    - Or when the no. of boxes is zero

=== Assert Raises Exception (Contd.)

  * `pytest.raises` can be used to verify that an exception was raised
+
------
pytest.raises(exception, func, *args)
------
+
  * Verify that `ValueError` is raised when an invalid
    character is present
+
[source,python]
------
include::code/test_model_v5/test1.py[]
------

=== Assert Raises with Regex Match

  * `ExceptionInfo` object is returned from `pytest.raises()`
  * Contains information about the raised exception
  * `ExceptionInfo.match` can verify that string representation of raised
    exception matches a regex
+
------
ExceptionInfo.match(regex)
------

=== Assert Raises with Regex Match (Contd.)

[source,python]
------
include::code/test_model_v5/test2.py[]
------

=== Assert Raises with Regex Match (Contd.)

  * Verify that `ValueError` is raised when no worker is
    present
+
[source,python]
------
include::code/test_model_v5/test3.py[]
------

=== Try Out

  * Add test cases from the previous slides and verify that they work
    as expected

  * Ensure that you are importing `pytest`, for the above test cases

  * Try adding a test case to verify that an exception is raised, when
    there is mismatch in the no. of boxes and docks

=== Test Case for Boxes != Docs

[source,python]
------
def test_boxes_docks_not_equal():
    level = [
        "#########",
        "#.$$ @  #",
        "#########",
    ]
    excinfo = pytest.raises(ValueError, World, level)
    assert excinfo.match("mismatch")
------

== Short Detour: Game Objects

=== Overview

  * Model: World
  * Controller: GameEngine
  * View: GameView

=== World Object

  * `get(pos)`
    - Query tile at the specified `(x, y)` position
    - Returns a `Tile`, with boolean attributes: `wall`, `worker`, `dock`, `box`
    
  * `move_worker(to_pos)`
    - Move worker to the specified position
    
  * `push_box(from_pos, to_pos)`
    - Move a box from one position to another

=== GameEngine Object

  * Rules engines, decides what is possible and what is not within a
    world

  * `move(dir, world)`

    - Validates and moves the worker in the specified direction, by
      updating the `World` object

    - Validates and pushes the box, if present

  * `is_game_over(world)`

    - Checks if the game is over
    - All boxes are in docks

== Mocking

=== What is Mocking?

  * Unit testing requirements:

    - A unit needs to be tested, in isolation from the rest of the
      units
  
    - Units being tested should not access external resources like
      network, filesystem, databases.
      
  * Mocking provides one way of satisfying these requirements

  * A Mock objects can be used to *simulate real objects*

  * In a unit test, Mock objects are deliberately used in place of
    real objects

=== Simulating Objects

  * Simulating an object with attributes
+
[source,python]
------
>>> from unittest.mock import Mock
>>> m = Mock(a=1, b=2)
>>> m.a
1
>>> m.b
2
>>> m.b = 3
>>> m.b
3
------

=== Simulating Functions

  * Simulating a function like object, returing a fixed value
+
[source,python]
-------
>>> mfunc = Mock(return_value=10)
>>> mfunc()
10
>>> mfunc()
10
-------

=== Simulating Functions (Contd.)

  * Simulating a function like object, returning a series of values
+
[source,python]
-------
>>> mfunc = Mock(side_effect=["a", "b", "c"])
>>> mfunc()
'a'
>>> mfunc()
'b'
>>> mfunc()
'c'
>>> mfunc()
...
StopIteration
-------

=== Simulating Functions (Contd.)

  * Simulating a function like object, raising an exception
+
[source,python]
------
>>> mfunc = Mock(side_effect=ValueError("test error"))
>>> mfunc()
...
ValueError: test error
------

=== On the Fly, Attributes

  * Object attribute assignment, creates attributes on the fly
+
[source,python]
------
>>> m = Mock()
>>> m.a = 10
>>> print(m.a)
10
------

=== On the Fly, Object Hierarchy

  * Object attribute access, auto-creates Mock objects
+
[source,python]
------
>>> m = Mock()
>>> m.b
<Mock ...>
>>> m = Mock()
>>> m.b.c = 30
>>> m.b
<Mock ...>
>>> m.b.c
30
------
+
  * Hierarchy of objects and attributes can be easily created

=== On the Fly, Functions

  * Turn any Mock object into a function like object by setting
    `return_value` attribute
+
[source,python]
------
>>> m = Mock()
>>> m.func.return_value = 20
>>> m.func()
20
------

=== Call Tracking

  * All calls made on Mock objects are captured and stored
+
[source,python]
------
>>> mfunc = Mock(return_value=None)
>>> mfunc(1, 2)
>>> mfunc(2, 3)
>>> mfunc.call_args_list
[calls(1, 2), calls(2, 3)]
------

=== Asserting on Calls

  * Helper methods to assert calls were made on the Mock object

  * `assert_called_with()`, checks if the *last call* was made with
    given arguments
+
[source,python]
-------
>>> mfunc = Mock(return_value=None)
>>> mfunc(1, 2)
>>> mfunc(2, 3)
>>> mfunc.assert_called_with(2, 3)
>>> mfunc.assert_called_with(1, 2)
...
AssertionError
-------

=== Asserting on Calls (Contd.)

  * `assert_any_call()`, checks if one of the calls was made with
    given arguments
+
[source,python]
------
>>> mfunc = Mock(return_value=None)
>>> mfunc(1, 2)
>>> mfunc(2, 3)
>>> mfunc.assert_any_call(1, 2)
>>> mfunc.assert_any_call(2, 3)
------

[role="two-column"]
=== Testing GameEngine

[role="left"]
image::figures/game-engine.png[align="center"]

[role="right"]
  * `GameEngine` manipulates the `World` object

  * Testing the `GameEngine` requires that we isolate it from `World`

  * `World` is simulated using a Mock object

  * Assertions on the Mock object will be used to verify the
    functionality of the `GameEngine`

[role="two-column"]
=== Review of Object Methods

[role="left"]
[source,python]
------
class GameEngine:
    def move():
        ...
	
    def is_game_over():
        ...
------

[role="right"]
[source,python]
------
class World:
    def move_worker():
        ...

    def push_box():
        ...
------

=== Test Case for `is_game_over()`

  * `is_game_over()` checks if each box is in a dock position

  * Create a `Mock()` for the world, with attributes `box_pos` and `dock_pos`

  * Invoke `is_game_over()` with the mocked world

=== Test Case Implementation

[source,python]
------
include::code/test_controller_v1.py[]
------

=== Try Out

  * Update the test cases with the code from the previous slide.

  * Execute the test cases and verify that the tests pass.

  * Add a test case to verify that `is_game_over()` returns `False`

    - When the boxes or not in the docks

=== Simplified `move()`

[source,python]
------
    def move(direction, world):
        x, y = world.worker_pos[0]

        if direction == Dir.UP:
            next_pos = (x, y - 1)
        elif direction == Dir.DN:
            next_pos = (x, y + 1)
        elif direction == Dir.RT:
            next_pos = (x + 1, y)
        else:  # if direction == Dir.LT:
            next_pos = (x - 1, y)

        next_tile = world.get(next_pos)
        if next_tile.wall:
            return

        world.move_worker(next_pos)
------

=== Testing `move()`

image::figures/move-floor.png[width="20%"]

[source,python]
-----
mock_world = Mock()
mock_world.worker_pos = [(3, 1)]
mock_world.get.return_value = Tile(wall=False,
                                   dock=False,
				   worker=False,
				   box=False)
engine = GameEngine()
engine.move(Dir.RT, mock_world)

mock_world.move_worker.assert_called_with((4, 1))
-----

=== Testing `move()` into Wall

image::figures/move-wall.png[width="20%"]

[source,python]
-----
mock_world = Mock()
mock_world.worker_pos = [(3, 1)]
mock_world.get.return_value = Tile(wall=True,
                                   dock=False,
				   worker=False,
				   box=False)
engine = GameEngine()
engine.move(Dir.RT, mock_world)

assert mock_world.move_worker.called == False
-----

=== Real `move()` Implementation

  * Simplified move, only moves the worker

  * The real `move()` needs to move the boxes as well

    - If we move, *into* a box
    - The *box* needs to be moved

image::figures/move-box.png[width="20%",align="center"]

=== Real `move()` Implementation

  * But only if the box can be moved
  * Box cannot be pushed into a wall

image::figures/move-box-wall.png[width="20%",align="center"]

=== Real `move()` Implementation

  * But only if the box can be moved
  * Box cannot be pushed into another box

image::figures/move-box-box.png[width="20%",align="center"]

=== Testing `move()` Box

image::figures/move-box.png[width="20%",align="center"]

[source,python]
-----
mock_world = Mock()
mock_world.worker_pos = [(2, 1)]
mock_world.get.side_effect = [
	Tile(wall=False, dock=False, worker=False, box=True),
	Tile(wall=False, dock=False, worker=False, box=False)
]
engine = GameEngine()
engine.move(Dir.RT, mock_world)

mock_world.push_box.assert_called_with((3, 1), (4, 1))
mock_world.move_worker.assert_called_with(3, 1)
-----

== Patching

=== Testing the View 

  * View layer of Sokoban is written in Pygame

  * `GameView` object is where all access to Pygame is done

  * `GameView` initializes Pygame and sets the window caption
+
[source,python]
------
    def __init__(self):
        self._screen = None
        self._images = {}
        self._done = False
        pygame.init()
        pygame.display.set_caption("Sokoban!")
------

=== Testing the View (Contd.)

  * Unit testing best practices suggest that the `pygame` should be
    isolated, while testing `GameView()`

  * `pygame` is not passed into the function as argument

  * If it were passed in as argument, we could pass in a Mock object
    for purpose of testing

  * How do we replace `pygame` with a Mock Object?

=== Enter Monkey Patching

  * Monkey patch is a piece of code, which extends or modifies other
    code at runtime
+
[source,python]
------
>>> import sokoban
>>> sokoban.pygame
<module ...>
>>> mpygame = Mock()
>>> sokoban.pygame = mpygame
------
+
  * With this patch in place, all the accesses to `pygame`, within the
    `view` module will receive our Mock object

=== Verifying the Patch

  * Let's verify that our Mock object is indeed, being used, within `view`
+
[source,python]
------
>>> view = sokoban.GameView()
>>> mpygame.init.called
True
>>> mpygame.display.set_caption.call_args_list
[call("Sokoban!")]
------
+
  * This proves that the `set_caption()` was infact called on the Mock
    object we patched into `pygame`

=== Managing the Patch

  * A patch should be reverted when no longer required

  * Forgetting to revert the patch will affect the functionality of
    the patched code

  * Patching for unit testing, should be restricted to the duration of
    execution of the test

    - Install the patch
    - Run the test
    - Revert the patch

  * `mock` module provides convient helpers for this purpose

=== Using `patch()`

  * `patch()` should be provided the target to be patched
  * Target is specified as a string, of the form `package.module.name` 
  * `.start()` patches the target with a mock object, and returns it
  * `.stop()` restores the original object

[source,python]
------
>>> patcher = patch("sokoban.pygame")
>>> mpygame = patcher.start()
>>> import sokoban
>>> sokoban.pygame
<MagicMock ...>
>>> patcher.stop()
>>> sokoban.pygame
<module ...>
------

=== Patching Custom Object

  * A custom object to be patched, can be provided as argument.
+
[source,python]
------
>>> mpygame = Mock()
>>> patcher = patch("sokoban.pygame", mpygame)
------

=== Test Case Implementation

[source,python]
-------
include::code/test_view_v1.py[]
-------

[role="two-column"]
=== Testing Load Levels

[source,python]
------
def load_levels():
    """Returns levels loaded from a JSON file."""
    try:
        return json.load(xopen("levels.json"))
    except (OSError, IOError, ValueError):
        print("sokoban: loading levels failed!", file=sys.stderr)
        exit(1)
------

=== Testing Load Levels (Contd.)

[source,python]
------
include::code/test_load_levels_v1.py[]
------

=== Try Out

  * Update the test cases with the code from the previous slide

  * Execute the test cases and verify that the tests pass

  * Add a test case to verify that 'SystemExit' exception is raised
    when, a invalid JSON is passed

=== Try Out (Contd.)

[source,python]
------
include::code/test_load_levels_v2/invalid-json.py[]
------

=== Injecting Exceptions

[source,python]
------
include::code/test_load_levels_v2/os-error.py[]
------

== Fixtures

=== What is Fixture?

  * Integration Tests
    - setup before the test
    - cleanup after the test
  * Example
    - Populate database with a dataset
    - Set of files on the filesystem
  * Fixtures: setup / environment required to execute tests

=== Test Frameworks and Fixtures

  * Test frameworks allows
    - create fixtures
    - re-use fixtures
    - teardown fixtures

=== Fixtures and Unit Testing

  * Unit testing with mocks do not require fixtures

  * But, fixtures can be used for dealing with patching

  * Issues in previous test cases with patching

    - If test case fails, patch will not be reverted

  * Patching can be handled correctly with fixtures

=== Creating Fixtures

[source,python]
------
include::code/test_load_levels_v3/fixture.py[]
------

=== Using Fixtures

[source,python]
------
include::code/test_load_levels_v3/test-cases.py[]
------

== Managing Test Cases

=== Test Reports

  * Generate reports in html format

  * Plugin `pytest-html`, can be installed using `pip`
+
------
$ py.test --html=report.html
------

=== Test Coverage

  * Identify portions that have not been tested

  * Coverage tools track execution and records lines that have beeen
    executed

  * Plugin `pytest-cov`
+
------
$ py.test --cov=sokoban --cov-report html
------

=== CI Integration

  * Execute test cases whenever code repository is updated

  * Test reports can be published from the CI

  * Test reports can be generated in JUnit XML format
+
------
$ py.test --junit-xml=report.xml
------

== Resources

=== Documentation

  * pytest Documentation
    - https://docs.pytest.org/en/latest/
  * mock / patch Documentation
    - https://docs.python.org/3/library/unittest.mock.html
  * Coverage Documentaton
    - http://coverage.readthedocs.io/en/latest/
  * Pygame Documentation
    - https://www.pygame.org/docs/

=== About the Trainer

==== Left

  * Vijay Kumar B. https://www.linkedin.com/in/bravegnu/[LinkedIn]
  * Open Source and Free Software Enthusiast
  * Specialize in
    - Python
    - Embedded Systems
    - Linux

==== Right

  * Volunteer
    - Chennaipy
    - PyCon India
    - PySangamam


