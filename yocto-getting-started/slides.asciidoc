= Getting Started with Yocto
Zilogic Systems <training@zilogic.com>
:data-uri:

== Working with Yocto

=== Setting up Yocto

 * Install dependencies for Yocto build

[source,shell]
----
 $ sudo apt-get install --no-install-recommends
            build-essential patch \
 	    diffstat git gawk chrpath \
            cpio texinfo libsdl-dev vim
----

 * Create a project directory and download Yocto

[source,shell]
----
$ cd ~/yp/dl
$ wget -c \
  https://downloads.yoctoproject.org/releases/yocto/yocto-4.0/poky-00cfdde791a0176c134f31e5a09eff725e75b905.tar.bz2
$ cd ~/yp
$ mkdir -p yocto-project
----

=== Setting Up Yocto (1)

 * Unpack the poky build environment as

[source,shell]
------
$ tar -x -f ~/yp/dl/poky-fido-13.0.0.tar.bz2
$ cd poky-fido-13.0.0
$ ls
------

 * Extracted folder has bitbake, meta layers, scripts & oe-init
   scripts

 * Set up the yocto build environment by sourcing _oe-init-build-env_
   script file with your project name as argument.

[source,shell]
------
$ source oe-init-build-env
------

=== Setting Up Yocto (2)

 * The script creates and switches to a build directory, in which the
   further builds would be performed.

 * To start building, We should provide the target board (machine) for
   which the kernel and rootfs has to be built by Poky.

 * For our experiment we are going to use an arm target board emulated
   through QEMU.

 * Which can be configured by exporting a shell variable as shown
   below.

[source,shell]
------
$ export MACHINE=qemuarm
------

=== Need for Configuration File

 * There are configurations other than MACHINE, which may need to be
   passed to the poky build environment. 

 * Passing all required configurations through environment variables
   would be inconvenient.

 * And also the Poky accepts only limited configurations through
   environment variables.
//////
 * The list of whitelisted variables, that can be passed to bitbake
   recipes, can be obtained from below command.

[source,shell]
----
$ echo $BB_ENV_EXTRAWHITE
----
/////////
 * To manage this, Poky provides a mechanism of passing configurations
   through file.

=== Managing Configurations in File 

 * One such high level user manageable configuration file is
   local.conf

[source,shell]
------
$ vim build/conf/local.conf
------

 * Other parameters like number of threads to use, location for
   downloading the sources, etc., can be given through local.conf

=== Reducing Build Time

 * Since yocto build would take huge build space, build time and
   download bandwidth, it has facility to cache and reuse the build
   state and download directories

 * We can reuse the download dir and state-cache made available by us
   in /opt by adding below information to the
   build/conf/local.conf

------
DL_DIR = "/opt/downloads"
SSTATE_DIR = "/opt/sstate-cache"
------

=== Building Minimal Rootfs

 * To build the rootfs image, image name to be built has to be given
   as argument to bitbake.

 * core-image-minimal is a minimal console-only rootfs supported by
   poky and which can be built as shown below.

[source,shell]
------
$ bitbake core-image-minimal
------

 * Built kernel and rootfs images would be available in
   `build/tmp/deploy/images/${MACHINE}` directory.

 * Along with the images you may also find manifest files describing
   the packages available in rootfs.

=== Build Artifacts

 * The build should get completed in fewer minutes as it tries to
   reuse state-cache

 * After successful completion of the build the kernel image and
   rootfs images would be available in the tmp/deploy/images/qemuarm

[source,shell]
--------------
$ ls tmp/deploy/images/qemuarm/
--------------

 * The list of packages in rootfs can be read from manifest file.

[source,shell]
--------------
$ cat tmp/deploy/images/qemuarm/core-image-minimal-qemuarm.manifest
--------------

=== Booting Image with QEMU

 * Copy the zImage to shared folder $SHARED and
   core-image-minimal-qemuarm.ext4 as disk.img in $SHARED

 * Now we can boot our new images using qemu arm as shown

[source,shell]
------
$ ./runqemu.sh
------

=== Customizing the Build

* It is possible to customize the Poky build, to add a package to
  image or to exclude a package from the build through configuration.

* We can add a package to image by appending package name to he
  IMAGE_INSTALL variable.

* We can exclude a package from the build by appending the package
  name to PACKAGE_EXCLUDE variable.

=== Knowing Packages and Their Dependencies

* let's check the packages built in core-image-minimal by using -g
  option

[source,shell]
------
$ bitbake -g core-image-minimal
------

* Which generates a file named _pn-buildlist_ which has list of
  packages that would be built by core-image-minimal.

[source,shell]
------
$ vim pn-buildlist
------

* From this list we can find that, what is not built by
  core-image-minimal recipe.

=== Adding Package to a Build


* We can find the package name and version of the using
  --show-version option of bitbake as

[source,shell]
------
$ bitbake -s | grep <package>
------

* We can enable building a package by adding below line to local.conf

------
IMAGE_INSTALL += <package>
------

=== Need for Layer

* Any changes made in build/conf/local.conf is temporary and it cannot
  me maintained, shared or version controlled.

* Better practise is to maintain all our permanent changes in separate
  layer, which can be maintained in version control system.
