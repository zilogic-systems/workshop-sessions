= Custom Layers with Yocto
Zilogic Systems <training@zilogic.com>

== Build Your Own Layer and Image

=== Tiny Rootfs

 * As an experiment we can try to build the rootfs, which we had built
   earlier with Zepto, now using yocto. This would involve,

 ** building bash, coreutils & less.

 ** building the ext formatted rootfs

=== Creating Our Own Meta Layer

 * The better practise while working with yocto, is creating your own
   layer to hold your changes.

 * We can run the below command to create a layer called meta-zepto-fs
   in the poky folder

[source,shell]
------
$ bitbake-layers create-layer ~/yp/poky/meta-zepto-fs
------

 * It prompts for various options which you can leave to default and
   this creates a directory meta-zepto-fs in the current directory.

 * We can find the layer.conf file inside the conf folder of
   meta-zepto-fs.

=== Need for Custom Image

 * As we know that, Yocto expects the list of packages to be built,
   should be provided through a variable IMAGE_INSTALL through a
   recipe or conf file.

 * core-image-minimal.bb was packing-in lots of packages into rootfs

 * for our zepto-fs, we need only three packages bash, coreutils and
   less. It is better to create our own recipe to build rootfs image.

=== Creating Custom Image

 * We can check the recipe of core-image-minimal available in meta
   layer to create our own custom image

[source,shell]
------
$ cat meta/recipes-core/images/core-image-minimal.bb
------

 * It defines IMAGE_INSTALL & inherits core-image class

 * Yocto provides core-image class which can be inherited, to use
   already defined definitions to build rootfs image.


=== Creating Custom Image

 * When we look on the layer.conf of our layer, we would find that the
   recipes are added to BBFILES from particular folder hierarchy.

------
BBFILES += "${LAYERDIR}/recipes-*/*/*.bb"
------

 * Sticking to Yocto's convention, we can create our image recipe
   named core-image-tiny.bb in meta-zepto-fs/recipes-core/images/
   folder

[source,shell]
------
$ mkdir -p meta-zepto-fs/recipes-core/images/
------

=== Knowing Supported Packages

 * The packages that are available in currently added layers, can be
   obtained using

[source,shell]
----------
$ bitbake -s | grep -i coreutils
----------

 * From which we can get the package names for bash, coreutils and
   less.

=== Adding Packages to Recipe

 * In the image recipe file we can define the list of packages to be
   built into the rootfs image.

[source,shell]
------
$ vim meta-zepto-fs/recipes-core/images/core-image-tiny.bb


SUMMARY = "A tiny image just capable of allowing a device to boot."
IMAGE_INSTALL = " bash coreutils less "
inherit core-image
------

=== Handling Layers

 * We can list the layers added and their priority using

[source,shell]
------
$ bitbake-layers show-layers
------

 * We can add a layer to the current build as 

[source,shell]
------
$ bitbake-layers add-layer <path to the layer>
------


 * We can list the recipes based on their layers as 

[source,shell]
------
$ bitbake-layers show-recipes
------
 
=== High Level Configuration of the Build

 * At-last the configurations for the current build has to be updated
   to the `build/conf/local.conf`

 * For our build we may need to provide two information 
   - target MACHINE for which this build performed and 
   - the DISTRO build policy to which adhered

 * We are going to build the rootfs for the qemu emulated arm target,
   which can be specified as `MACHINE = "qemuarm"`

=== Package Classes and Types

 * By default the distribution is built using rpm, but support for deb
   and opkg exists.
 
 * `opkg` is light-weigt packaging format, which is maintained by
   yocto currently.

 * we can override that by declaring the 

----
PACKAGE_CLASSES="package_deb"
----

 * If wanted to add any image specific features, like kinds of
   packages(doc, debug, etc) that has to be added to the image, we can
   specify it as shown below in local.conf or core-image-tiny.bb

-----
IMAGE_FEATURES = "doc-pkgs"
-----

== Distribution

=== Customization on Distribution Level

 * If we want to different package management to be chosen, different
   init system to be chosen. These are defined to be the policy of the
   distribution.

 * For ex. Below command would configure yocto to build debian
   packages.

----
PACKAGE_CLASSES = "package_deb"
DISTRO_FEATURES_append = " sysvinit"
VIRTUAL-RUNTIME_init_manager = "sysvinit"
VIRTUAL-RUNTIME_dev_manager = "udev" 
----

=== Creating Our Own Distribution

 * By yocto convention, we may need to create a _distribution_ which has
   information about the policies to be adhered whiling building the
   individual components.

  * Distro configurations are more about how the packages are
    configured and built, rather than what packages are built.

  * Some of the distro configurations chooses how the system and
    packages has to be started in boot (sysv init or systemd)

  * Whether QT like UI components has to be compiled with X11 support
    or directfb support.

  * Certain distro features can depend on HW related
    features.

=== Creating Our Own Distribution

  * We can create a new distribution called zebian in our meta-zepto-fs
    layer

  * Inside the meta-zepto-fs/conf create a directory distro and file
    zebian.conf inside it. Write below given distro descriptions to
    it.

[source,shell]
------
$ cd ..
$ vim meta-zepto-fs/conf/distro/zebian.conf

DISTRO = "zebian"
DISTRO_VERSION = "1.0"
PACKAGE_CLASSES = "package_deb"
------

=== Adding Our Distro to local.conf

 * Since we don't have big policies thought out for our new
   distribution, we can just choose a packaging method for our distro.

 * Can edit the conf/local.conf to build our new distro as shown below

[source,shell]
------
$ vim conf/local.conf


MACHINE = "qemuarm"
DISTRO = "zebian"
CONF_VERSION = "1"
------

=== Adding Our Layer to Yocto

 * The new layer created has distro configuration and the core-image
   recipe.

 * The meta-zepto-fs layer has to be added to the yocto build as

[source,shell]
------
$ cd build
$ bitbake-layers add-layer ../meta-zepto-fs
------

 * We can find that our layer is added into bblayers.conf

[source,shell]
-----
$ bitbake-layers show-layers
$ cat conf/bblayers.conf
-----

=== Building Tiny-FS Image

 * Now we can start building the tiny-fs image by invoking

[source,shell]
--------
$ bitbake core-image-tiny
--------

 * The build should get completed in fewer minutes as it tries to
   reuse state-cache

 * Build the core-image-tiny image and it would get built on
   `tmp-glibc`

 * Test the new distro on the target.

=== Checking Our Tiny-FS Image

 * The list of packages in rootfs can be read from manifest file

[source,shell]
---------
$ vim tmp-glibc/deploy/images/qemuarm/core-image-tiny-qemuarm.rootfs.manifest
---------

=== Booting the Tiny-FS Image

 * Now we can boot our new images using qemu arm as shown

[source,shell]
------
$ runqemu qemuarm
------

=== Bare Minimal local.conf

 * The yocto expects the version of the current configuration to be
   provided using CONF_VERSION

[source,shell]
------
S vim conf/local.conf

MACHINE = "qemuarm"
DISTRO = "poky"
CONF_VERSION = "1"
------

 * Below line can be added to local.conf to modify that to build
   faster

-----
SSTATE_DIR = "/opt/sstate-cache"
-----

=== Adding More Layers

 * The recipes provided by default layers of Yocto is less.

 * Recipes for BSP is provided by SOC vendors through separate meta
   layer.

 * Further packages which are not part of Yocto can be obtained from
   openembedded meta layers.

=== Handling Recipes in Multiple Layers

 * The recipes which are defined in multiple added layers are called
   overlayed recipes.

 * The overlayed recipe in layer, which has higher BB_FILE_PRIORITY
   value, would be considered for build.

 * So provding a higher priority value to local layers would make us
   to build our recipes over upstream recipes.
