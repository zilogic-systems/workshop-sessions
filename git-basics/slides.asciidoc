= Getting Started with Git
Zilogic Systems <training@zilogic.com>

== Introduction

=== Poll

  * What has been your experience with Git?

    - [A] Never used it.
    - [B] Used it, but never got to understand the commands.
    - [C] Tried understanding Git, but never understood much of it.
    - [D] It has been easy learning Git, so far.

=== Overivew

  * Introduction to Version Control
  * Introduction to Git
  * Viewing History
  * Branching Basics
  * Track and Untrack Files
  * Creating a New Repository

== Introduction to Version Control

=== Why Version Control?

  * Experimenting with code
  * Bug fixing releases
  * Collaboration

=== Experimenting with Code

  * Don't really know if the changes will work
  * If it doesn't we would like to undo
  * Discard all changes and go back

[style="two-column"]
=== Bug Fixing Releases

image::figures/bug-fix.png[style="left",align="center",width="60%"]

[style="right"]
  * Software is released to the customer
  * Development work starts for the next release
  * Mid-way through customer, reports a bug
  * Development code cannot be released. Fix needs to be made in the
    released code
  * Need to keep track of previous releases
  * Need to keep track of bug fix branch


=== Collaboration

  * Multiple people working on a code base
  * Need a mechanism to merge changes from all developers into the
    code base


=== Manual Version Control

  * Copy of the source tree - snapshot
  * Take a snapshot before a major change
  * Take a snapshot while making a release
  * Disadvantages
    - Error prone - what if you forget to take a snapshot
    - Hard to track what change has been in each snapshot
    - Collaboration will require tiresome manual merge


=== Version Control Systems

  * Can be instructed to take snapshot of source code - *revisions*
  * Process of making a snapshot - *commit*
  * Previous revisions can be retrieved at any time
  * Revisions released to customers can be *tag*-ged
  * Multiple branches can be tracked
  * The data store containing the previous revisions is called a
    repository or *repo*
  * Collaboration is also handled by the VCS

[role="two-column"]
=== Terminology Review

[role="left"]
image::figures/terminology.png[align="center"]

[role="right"]
  * __Commit__: taking a snapshot, AKA __revision__
  * __Repo__: data store containing previous revision of source tree
  * __Checkout__: taking a copy of the latest revision for editing
  * __Working Copy__: copy of the latest revision used to create the next
    revision

=== Quiz

  * Which of the following is not a version control system?

    - [A] Subversion
    - [B] GitHub
    - [C] Git
    - [D] Mercurial

=== Quiz

  * Which of the following is not True?

    - [A] Repository is a collection of previous revision of a project
    - [B] Working copy is the latest revision used to create the next revision
    - [C] Names given to revisions are called tags
    - [D] Commit is taking a copy of a revision for editing

== Introduction to Git

=== Git

  * Git is a version control system
  * Originally developed by Linus Torvalds
  * Currently used in maintaining the Linux Kernel and countless other
    open source projects
  * Git is a Distributed Version Control System


[style="two-column"]
=== Getting Started

image::figures/git-repo.png[style="left",align="center",width="50%"]

[style="right"]
  * In a project tracked by Git, the project directory has both the
    working copy and the repo.

  * The `.git/` folder is the Git repository where previous revisions are
    stored


=== Making Changes

  * Edit a file, and commit the changes
  * Commit - takes a snapshot of the source tree
  * Snapshot is stored in repository
  * Each revision is identified by a unique 40 digit hex no.
  * The first 7 hexadecimal digits of which is printed as a response
    to the commit command

------
$ git commit -a -m "Some Change"
------


=== Try Out - 1

  * The `book` project is tracked using Git
  * The `chapter-3.txt` has an author line, which is missing in
    `chapter-1.txt` and `chapter-2.txt`
  * Fix the author line and commit the changes

------
$ git commit -a -m "Fixed author line."
------


=== What's Going On?

  * The files changed in the working copy can be listed using the
    `status` sub-command

  * The actual diff between the working copy and the latest revision
    can be displayed using the `diff` sub-command

  * Useful for reviewing changes before committing

------
$ git status
$ git diff HEAD
------


=== Try Out - 2

  * The `chapter-1.txt` and `chapter-2.txt` have the word "freedom"
    spelled incorrectly as "fredom"

  * Modify the files to reflect the correct spelling

  * View the status of the files

  * View the diff against the latest revision in the repository

  * Commit the changes made to the files


== Viewing History


=== Who did What?

------
$ git log
------

  * The history of changes made to the project can be viewed using the
    `log` sub-command

  * The command displays

    - The 40 digit hexadecimal revision identifier
    - The developer who made the change
    - The date the change was made
    - The associated commit log


=== Going Back in Time

------
$ git checkout 830277d
$ git checkout master
------

  * At times it is useful to view the previous revision of a project

  * The previous revision can be checked out using the `checkout`
    sub-command

  * But files cannot be changed and committed, a branch needs to be
    created

=== Try Out - 3

  * List out the previous commits using the `git log` command.

  * Checkout the first commit, using the `git checkout <commit>`.

=== Quiz

  * Which of the following statements is false?
    - [A] The git repo is within the project folder.
    - [B] The git commits are identified by a unique 40 digit hex no.
    - [C] As part of the commit, git stores meta information like
      commit author, date and time of commit, etc.
    - [D] git checkout can be used to checkout only the latest commit

== Branching Basics

[role="two-column"]
=== Branching

[role="left"]
image::figures/bug-fix.png[style="left",align="center",width="60%"]

[role="right"]
  * Branching is useful when *bug fixes* have to be made to previous
    *released versions*

  * Also useful when an *experimental changes* have to be made to the
    repository

  * This helps to maintain a clean history in the main trunk

  * Git recommends the creation of a *topic branch*, for each new
    development task


=== Creating a Branch

  * A branch can be created using the checkout sub-command with `-b`
    option

  * The current branch can also be switched using the checkout
    sub-command

  * The default development branch is `master`

------
$ git checkout -b my-new-branch
$ git checkout my-old-branch
------

[style="two-column"]
=== Try Out - 4

------
$ git checkout -b year-fix
$ git commit -a -m "..."
------

image::figures/branch-1.png[style="right",align="center",width="60%"]

[style="left"]
  * `chapter-3.txt` has an year missing, in line 8

  * Create a bug-fix branch called `year-fix`

  * Insert `1984` instead of `????` in line 8

  * Commit the changes

=== Creating Branch from Revision

  * A branch can also be created from a specified revision.

  * The revision is identified by the 40 digit hex no. or just the
    first 7 digits of it.

------
$ git checkout -b my-new-branch a75b1b0
------


=== Merging a Branch

  * Changes from another branch can be merged into the current branch
    using the merge sub-command

  * Even if the same file has been modified in both the branches, the
    changes are merged together by Git

------
$ git merge my-new-branch
------

[style="two-column"]
=== Try Out - 5

image::figures/branch-2.png[style="right",align="center"]

[style="left"]
  * Switch to `master` branch

  * Fix the spelling of the word `long` in `chapter-3.txt`, line 6

  * Commit the change
+
------
$ git checkout master
$ git commit -a -m "..."
------

[style="two-column"]
=== Try Out - 6

image::figures/merged.png[style="right",align="center"]

[style="left"]
  * Merge changes from the `year-fix` branch into master
+
------
$ git merge year-fix
------
+
  * A merge commit is created that represents the new state of the
    project

  * Verify that the year change is now present in master.

=== Growing Branches

  * A branch can grow after it has been merged

  * The user doesn't have to do any extra book keeping to deal with
    such branches

  * Git intenally keeps track of what changes have been merged

  * The new changes on the branch can be merged in to the current
    branch using the same command

[role="two-column"]
=== Merge Growing Branches

[role="left"]
image::figures/merged-2.png[align="center",width="50%"]

  * Checkout `year-fix`
  * In chapter 3, insert `1991` instead of `????` in line 32, and commit
  * Checkout `master`

[role="two-column"]
=== Merge Growing Branches

[role="left"]
image::figures/merged-3.png[align="center",width="50%"]

  * Merge the changes from `year-fix`.

=== Quiz

  * Which of the following statements is false?
    - [A] It is possible to create a branch from any commit
    - [B] A branch is deleted after it is merged
    - [C] The default branch in git is called the master branch
    - [D] Branches are independent lines of development

== Track and Untrack Files

=== Start Tracking Files

  * Start tracking files using `add` sub-command
+
------
git add <filename>
------
+
  * Remove files from project using `rm` sub-command
+
------
git rm <filename>
------

=== Try Out - 7

  * Create a file called `chapter-4.txt`.

  * `git status` will indicate that the file is untracked

  * Tell Git to start tracking the file.
+
-----
$ git add chapter-4.txt
-----
+
  * Commit the newly added file.
+
-----
$ git commit -a -m "Added a Chapter 4."
-----
+
  * `chapter-4.txt` is no longer indicated as untracked

=== Try Out - 8

  * Remove the file `chapter-4.txt`.
+
------
$ git rm chapter-4.txt
------
+
  * Commit the removal of the file.
+
------
$ git commit -a -m "Removed Chapter 4."
------

=== What about Directories?

  * Not possible to add an empty directory.

  * Only files can be added using `add`.
+
-----
$ mkdir subdir
$ git add subdir
$ git status
$ echo "Hello World" > subdir/test.txt
$ git add subdir
$ git status
-----

== Creating a New Repository

=== Set-up

  * Tell Git your name, email address and your default editor

  * The name and email address will be included in the commit 

  * The editor will be used when Git wants multi-line input from the
    user, like when the commit message is not specified
+
------
$ git config --global user.name "Your Name"
$ git config --global user.email "you@example.org"
$ git config --global core.editor your-favourite-editor
------
+
  * The global config is stored in `~/.gitconfig`

  * Per project config is stored in `.git/config`

=== Try Out

  * Setup Git in your system by specifying the following configuration

    - `user.name`
    - `user.email`
    - `core.editor`

=== Tip

Tip: In Windows, use `git config --global --edit` to figure where exactly
the global config is stored.

=== Try Out - 9: Initializing an Empty Repo

  * Create a new project folder
+
-----
$ mkdir proj
$ cd proj
-----
+
  * Create a Git repository
+
-----
$ git init
-----

=== Try Out - 9: Populate the repository

  * Create files and add them.
+
-----
$ echo "Hello World" > hello.txt
$ echo "Goodbye World" > goodbye.txt
$ git add hello.txt goodbye.txt
-----
+
  * Make the initial commit
+
-----
$ git commit -a -m "Initial project folder."
$ git log
-----
