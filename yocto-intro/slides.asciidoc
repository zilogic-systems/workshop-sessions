= Yocto - Introduction
Zilogic Systems <training@zilogic.com>
:data-uri:

== Preface

=== Limitations of Zepto

 * The project Zepto which has been developed previously, builds only
   3 software components and has recipes, to create a rootfs image
   with it.

 * For a bigger embedded Linux projects, these 3 components would not
   be sufficient and it may require us to write recipes for huge list
   of packages.


[style="two-column"]
=== Solution

[style="right"]
 * To address these issues developers of bitbake had developed recipes
   for many open-source projects and supportive infrastructure to
   create different file-system images.

 * Bitbake developers grouped these recipes in meta layers and this
   complete build infrastructure is called as open-embedded build
   system.

image::figures/oe-logo.png[style="left",align="center"]

=== History of Yocto

 * Poky & Angstrom are two embedded distribution which were built
   using open-embedded build system.

 * Poky was a build system used by OpenedHand Project, After Intel
   taking over the OpenedHand project, Poky was adopted by Linux
   Foundation for its Yocto Project.

 * Yocto's goal was to provide complete development and test
   environment to the embedded Linux developers and vendor neutral
   collaboration environment.

== Introduction to Yocto

=== What is Yocto

==== Right

 * Is an Umbrella project, involves developing build tools to
   facilitate building of custom distribution for the embedded devices.

 * More than a build system, it focuses on complete build cycle
   involving compiling, debugging, testing on simulated hardware.

==== Left

image::figures/yocto-project-transp.png[style="left",align="center"]

image::figures/key-dev-elements.png[style="left",align="center"]

=== Yocto's Unique Features

 * Supports segregating and maintaining build recipes in atomic layers
   for different providers separately.

 * Required layers can be pulled into build system, when required.

 * Supports sufficient infrastructure to perform post build analysis
   on the build artifacts, for their size, dependency, quality and
   licenses.

 * Application developer's centric tools and workflow.
 
=== Yocto Over Pre-built Distros

[style="right"]

  * Allows building a custom rootfs from source for small footprint
    devices.

  * Building with desired tool-chain.
  
  * Allows building software components for processor specific
    support. Ex: Compiling X with Processor specific graphic
    accelerators.

  * Supports handling open source and proprietary licensed software
    build.

[style="two-column"]
=== Yocto Over Buildroot

[style="right"]
  * Supports list of well tested open source software.

  * Allows building a managed rootfs with deb/rpm/ipk packages.

  * Provides a complete embedded development environment.

  * Well organized as layers and easily extendable

  * Allows testing software on emulators without a real target device.

image::figures/yocto-environment.png[style="left",align="center"]

=== Yocto internal projects

Yocto develops several projects to improve build infrastructure

 * Poky - reference build system

 * Autobuilder - build and test automation tool

 * ADT - Plugins for Eclipse/Anjuta IDE

 * Pseudo, cross-prelink - tools required to improve build

 * Hob & Toaster - UI tools to manage Yocto build and their results

 * Documentation - Detailed manuals to use Yocto for various embedded
   build scenarios.

 * Yocto project components are maintained in git repo
   https://git.yoctoproject.org/
///////
[style="two-column"]
=== Poky

[style="right"]

 * Poky is an independent open source project, Yocto uses Poky as its
   reference system.

 * Yocto tests and provides the Poky build environment as part of its
   releases, which when built, provides Poky reference distribution by
   default.

 * Over openembedded build system, Poky builds SDK and debugger as IDE
   plugins, integrates QEMU for target simulation.

image::figures/Poky-Logo.jpg[style="left",align="center"]

=== OpenEmbedded

 * Openembedded is an independent project for embedded Linux build
   system.

 * Openembedded Classic is a massive project which has thousands of
   recipes and hundreds of target boards.

 * Which has become a much bloated and hard to maintain.

 * Yocto and Openembedded share bitbake and a specific metadata(set of
   recipes) called openembedded-core.

 * Over openembedded community, Yocto ensures that oe-core meta-data
   are well-tested and inter-operable with platforms supported by
   Yocto.

 * Openembedded maintains bitbake and other recipes in
   http://cgit.openembedded.org/

 * New changes in bitbake and openembedded-core layers are merged
   first into open-embedded repository and later pulled by Poky repo.

[style="two-column"]
=== OE Vs Poky Repo

image::figures/oe-repo-cropped.png[style="left",align="center"]
image::figures/poky-repo-cropped.png[style="right",align="center"]
////////

=== Yocto Releases

* Yocto get released twice in a year.

|====
| *Name*| *Version*
|Scarthhap   | 5.0
|Nanbield  | 4.3
|Mickledore| 4.2
|Kirkstone   | 4.0
|Dunfell  | 3.1
|====

=== Release Timeline

image::figures/releases.png[style="left",align="center"]

=== Yocto Project Structure

image::figures/yocto-structure.png[style="left",align="center"]

=== Poky layers

image::figures/poky-layers.png[style="left",align="center"]

== Yocto Architecture

=== Yocto WorkFlow

image::figures/yocto-environment.png[style="left",align="center"]

=== User Configurations

[style="right"]
 * User can configure the build parameters through configuration
   files.

 * Name of the target board for which the software is built.

 * Build time optimization parameters.
 
 * Path of the different layers and their recipes.

 * Build features like build statistics.


=== Metadata

 * Meta Layer - has configurations, classes and build recipes for
   software packages specific to a layer.

 * Distro Layer  - has configurations and recipes which affects the build
   policy.
 
 * Machine Layer - has configurations and recipes related to target
   board and processor.

 * Image - handles list of packages to be installed into the rootfs
   and type of the rootfs to be built.

=== Build Process

Build process involves

* Scanning through recipes and their dependencies.

* Building the data store of the variables.

* Generating tasks list and scheduling them.

* Executing independent tasks parallely in separate threads.

* Archiving logs, manifests, packages and images in respective
  folders.

* Caches parsed recipes and build artifacts states, for later reuse.

=== Fetch and Build Tasks

* Uses the fetcher component to download, verify and unpack sources
  from

 ** Releases - tar/zip 

 ** SCMs - SVN, Git, CVS etc
  
 ** Local Projects - local folders

* Later the available patches are applied over the unpacked source.

* Then it configures, builds and installs the software packages.

* Build outputs are analyzed and split into normal, dev, dbg & doc
  packages and creates metadata for the packages.

=== Quality Assurance Checks

Can run through various quality assurance process through INSANE
class. Checks the build outputs for

  * build time and run-time dependencies

  * arch specific verification of ELF type, endianness and bit size.
  
  * incompatible licenses

=== Package Feed and Images Tasks

* Then the deb/rpm/ipk packages are built and placed into package feed
  area.

* The verified packages are available in separate architecture specific
  folders.

* The target specific packages available in package feed, can be
  installed into the rootfs.

* Type of rootfs can be controlled be through image specific
  variables.

* The image specific manifest files are created for further analysis.

* The package feeds can also be exposed as a repo through web server,
  so the packages in the target system can be updated at run-time.


=== References

 . https://docs.yoctoproject.org/4.0.14/overview-manual/yp-intro.html

== Credits

=== Photo Credits

 . https://bootlin.com/doc/training/yocto/yocto-slides.pdf (pg 36)
 . https://bootlin.com/doc/training/yocto/yocto-slides.pdf (pg 41)
