= BitBake Data Model
Zilogic Systems <training@zilogic.com>
:data-uri:

== Data Store

=== Recipe Data

When recipes are read all variables and task definitions are stored in
a hash map

[cols="25%m,75%m",options="header"]
|======
| Name		| Value
| PN		| bread
| do_get
| echo $\{PN}: wheat > bread.txt +
  echo $\{PN}: salt  >> bread.txt +
  echo $\{PN}: sugar >> bread.txt +
  echo $\{PN}: water >> bread.txt +
  sleep 1
| do_cook
| echo $\{PN}: bake for 20 - 25 minutes >> bread.txt +
  sleep 2 +
  echo $\{PN}: ready >> bread.txt +
|======

=== Recipe Data (Contd.)

  * Variable defintions and function definitions have different syntax

  * But internally they are stored in the same way

  * The hash map is called the *Data Store*

=== Recipe Data with Flags

[cols="25%m,25%m,50%m",options="header"]
|======
| Name		2+| Value
| PN		| _content	| sandwich
| DEPENDS	| _content	| bread omelet
.2+| do_get	| deptask	| do_cook
| _content
| echo $\{PN}: wheat > bread.txt +
  echo $\{PN}: salt  >> bread.txt +
  echo $\{PN}: sugar >> bread.txt +
  echo $\{PN}: water >> bread.txt +
  sleep 1
|======

=== Recipe Data with Flags (Contd.)

  * Each entry in the data store is itself a hash map

  * The hash map maps flag names to values

  * The special flag name `_content` is the 'value of the variable'

  * Data Store
    - A hash map that maps names to values
    - The values are in-turn hash maps that maps flag names to values

=== Recipe Processing

image::figures/datastore-no-finalize.png[align="center"]

=== Config Parsing

image::figures/conf-parsing.png[width="25%",align="center"]

=== Recipe Parsing

image::figures/recipe-parsing.png[width="22%",align="center"]

=== Pro Tip

  * Variable set in configuration files is visible to all recipes

  * Variable set within a recipe is visible only to that recipe

  * Variable set in class file is visible to all recipes inheriting
    the class file

== Improved Model

=== Recipe Processing with Finalize

image::figures/datastore.png[align="center"]

== Assignment Operators

=== Per Recipe Data Store

image::figures/per-recipe-data-store.png[width="60%",align="center"]

=== Default Value

------
a ?= b
------

On Assignment:

------
if a is not defined:
    a = b
------

=== Default Value: Example

[source,python]
------
a = "hello"

a ?= "world"
b ?= "world"

# ${a} == "hello"
# ${b} == "world"
------

=== Weak Default Value

------
a ??= b
------

On Assignment:

------
a[_weakdefault] = b
------

On Finalize:

------
if a is not defined:
   a = a[_weakdefault]
------

=== Weak Default Value: Example

[source,python]
------
# Conf
a ?= "world"
b ?= "world"

# Recipe
a ?= "hello"

# ${a} == "world"
# ${b} == "world"
------

=== Weak Default Value: Example (Contd.)

[source,python]
------
# Conf
a ??= "world"
b ??= "world"

# Recipe
a ?= "hello"

# After Finalize
#
# ${a} == "hello"
# ${b} == "world"
------

=== Appending

------
a += b
------

On Assignment:

------
a = a + " " + b
------

Example:

[source,python]
------
msg = "hello"
msg += "world"
# ${msg} == "hello world"
------

=== Prepending

------
a =+ b
------

On Assignment:

------
a = b + " " + a
------

Example:

[source,python]
------
msg = "world"
msg =+ "hello"
# ${msg} == "hello world"
------

=== Appending without Spaces

------
a .= b
------

On Assignment:

------
a = a + b
------

Example:

[source,python]
------
bb = "bit"
bb .= "bake"
# ${bb} == "bitbake"
------

=== Prepending without Spaces

------
a =. b
------

On Assignment:

------
a = b + a
------

Example:

[source,python]
------
bb = "bake"
bb =. "bit"
# ${bb} == "bitbake"
------

=== Appending after Finalize

------
a_append = b
------

On Assignment:

------
Add b to a[_append_list]
------

On Finalize:

-----
for append in a[_append_list]:
    a = a + append
-----

No spaces are added, if required should be provided a part of the
value

=== Example

[source,python]
------
# Conf
os += "freebsd"

# Recipe
os ?= "windows linux macosx"

# ${os} == "freebsd"
------

=== Example (Contd.)

[source,python]
------
# Conf
os += "freebsd"

# Recipe
os = "windows linux macosx"

# ${os} == "windows linux macosx"
------

=== Example (Contd.)

[source,python]
------
# Conf
os_append = " freebsd"

# Recipe
os ?= "windows linux macosx"

# After Finalize
#
# ${os} == "windows linux macosx freebsd"
------

=== Immediate Assignment

------
b = "BitBake"
a := "Hello ${b}"
------

On Assignment:

------
a = "Hello BitBake"
------
